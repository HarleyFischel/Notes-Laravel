{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["url","document","location","href","split","csrf","headers","xid","Number","isInteger","parseInt","length","Notes","props","state","error","isLoaded","items","i","this","fetch","then","res","json","result","setState","Array","from","Object","keys","k","message","className","map","key","id","onClick","openNote","note","substr","React","Component","Note","item","get","New","Edit","defaultValue","listNotes","window","history","replaceState","ReactDOM","render","addNote","getElementById","eid","oid","did","method","del","uid","body","JSON","stringify","value","update","editNote","insert","App","addEventListener","token","Boolean","hostname","match","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8c363f1a.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n//import logo from './logo.svg';\nimport './App.css';\n\nlet url = document.location.href.split('/');\n//console.log(url[url.length-1]);\nlet csrf = \"\",\n    headers = {\n        'X-CSRF-TOKEN': csrf,\n        'Content-Type': 'application/json'\n    },\n    xid = (Number.isInteger(parseInt(url[url.length-1])))?url[url.length-1]:'';\n\n//console.log(document.location.href);\nclass Notes extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: null,\n            isLoaded: false,\n            items: []\n        };\n    }\n\n    componentDidMount() {\n        list(this)\n    }\n\n    render() {\n        const { error, isLoaded, items } = this.state;\n        if (error) {\n            return <div>Error: {error.message}</div>;\n        } else if (!isLoaded) {\n            return <div>Loading...</div>;\n        } else {\n            return (\n                <ul className=\"notes\">\n                    {items.map(i => (\n                        <li key={i.id} className=\"link\" onClick={(id) => openNote(i.id)}>{i.note.substr(0,120)}{i.note.length > 120?'...':''}</li>\n                    ))}\n                </ul>\n            );\n        }\n    }\n}\n\nclass Note extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: null,\n            isLoaded: false,\n            id: props.id,\n            item: []\n        };\n    }\n\n    componentDidMount() {\n        get(this)\n    }\n\n    render() {\n        const { error, isLoaded, item } = this.state;\n        if (error) {\n            return <div>Error: {error.message}</div>;\n        } else if (!isLoaded) {\n            return <div>Loading...</div>;\n        } else {\n            return (\n                <pre>{item.note}</pre>\n            );\n        }\n    }\n}\n\nclass New extends React.Component {\n    render() {\n        return (\n            <textarea id=\"note\"></textarea>\n        );\n    }\n}\n\nclass Edit extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: null,\n            isLoaded: false,\n            id: props.id,\n            item: []\n        };\n    }\n\n    componentDidMount() {\n        get(this)\n    }\n\n    render() {\n        const {error, isLoaded, item} = this.state;\n        if (error) {\n            return <div>Error: {error.message}</div>;\n        } else if (!isLoaded) {\n            return <div>Loading...</div>;\n        } else {\n            return (\n                <textarea id=\"note\" defaultValue={item.note}></textarea>\n            );\n        }\n    }\n}\n\nfunction listNotes() {\n    if (xid !== '') {\n        window.history.replaceState('', 'Notes - Index', \"/\");\n    }\n    ReactDOM.render(\n        <li className=\"link\" onClick={addNote}>Add New</li>,\n        document.getElementById('nav')\n    );\n\n    ReactDOM.render(\n        <Notes />,\n        document.getElementById('notes')\n    );\n}\n\nfunction openNote(id) {\n    xid = id;\n    window.history.replaceState('', 'Notes - Index', \"/\"+id);\n\n    ReactDOM.render((\n        <span>\n            <li className=\"link\" onClick={listNotes}>Back</li>\n            <li className=\"link\" onClick={(eid) => editNote(id)}>Edit</li>\n        </span>\n    ), document.getElementById('nav'));\n\n    ReactDOM.render(\n        <Note id={id} />,\n        document.getElementById('notes')\n    );\n}\n\nfunction addNote() {\n    ReactDOM.render((\n            <span>\n                    <li className=\"link\" onClick={listNotes}>Cancel</li>\n                    <li className=\"link\" onClick={insert}>Save</li>\n                </span>\n        ), document.getElementById('nav')\n    );\n    ReactDOM.render(\n        <New />,\n        document.getElementById('notes')\n    );\n}\n\nfunction editNote(id) {\n    ReactDOM.render((\n        <span>\n            <li className=\"link\" onClick={(oid) => openNote(id)}>Cancel</li>\n            <li className=\"link\" onClick={(did) => del(id)}>Delete</li>\n            <li className=\"link\" onClick={(uid) => update(id)}>Save</li>\n        </span>\n    ), document.getElementById('nav'));\n\n    ReactDOM.render(\n        <Edit id={id} />,\n        document.getElementById('notes')\n    );\n}\n\nfunction token() {\n    fetch(\"http://localhost:8000/api/token/\")\n        .then(res => res.json())\n        .then(\n            (result) => {\n                csrf = result.token;\n                headers = {\n                    'X-CSRF-TOKEN': csrf,\n                    'Content-Type': 'application/json'\n                };\n            }\n        )\n}\n\nfunction list(i) {\n    fetch(\"http://localhost:8000/api/\")\n        .then(res => res.json())\n        .then(\n            (result) => {\n                i.setState({\n                    isLoaded: true,\n                    items: Array.from(Object.keys(result), k=>result[k])\n                });\n            },\n            (error) => {\n                i.setState({\n                    isLoaded: true,\n                    error\n                });\n            }\n        )\n}\n\nfunction get(i) {\n    fetch(\"http://localhost:8000/api/\"+i.state.id)\n        .then(res => res.json())\n        .then(\n            (result) => {\n                i.setState({\n                    isLoaded: true,\n                    item: result\n                });\n            },\n            (error) => {\n                i.setState({\n                    isLoaded: true,\n                    error\n                });\n            }\n        )\n}\n\nfunction insert() {\n    fetch('http://localhost:8000/api/', {\n        method: 'PUT', headers: headers,\n        body: JSON.stringify({ note: document.getElementById('note').value }),\n    })\n        .then(res => res.json())\n        .then((result)=>{\n            //alert( result.success );\n            listNotes();\n        });\n}\n\nfunction update(id) {\n    fetch('http://localhost:8000/api/', {\n        method: 'POST', headers: headers,\n        body: JSON.stringify({ id: id, note: document.getElementById('note').value }),\n    })\n        .then(res => res.json())\n        .then((result)=>{\n            //alert( result.success );\n            openNote(id);\n        });\n}\n\nfunction del(id) {\n    //if(confirm(\"are you sure?\")) {\n        fetch('http://localhost:8000/api/' + id, { method: 'DELETE', headers: headers })\n            .then(res => res.json())\n            .then((result)=>{\n                //alert( result.success );\n                listNotes();\n            });\n    //}\n}\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <div className=\"header\">\n            <h2 className=\"title\">My Notes</h2>\n            <ul id=\"nav\" className=\"nav\"></ul>\n        </div>\n\n        <div className=\"container\">\n            <div id=\"notes\"></div>\n        </div>\n\n    </div>\n  );\n}\n\nexport default App;\n\n/*function run() {\n    ReactDOM.render(<App />, document.getElementById('app'));\n}*/\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n    token();\n\n    if (xid !== '') {\n        openNote(xid);\n    } else {\n        listNotes();\n    }\n\n//    listNotes();\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}